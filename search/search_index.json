{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This website provides technical documentation for the Juniper codebase. Documentation for the main branch is available online at: https://docs.calitp.org/data-infra Editing documentation \u00b6 The docs content all lives under docs/ , with some top-level configuration for how the docs website gets built under mkdocs.yml . To add new sections/articles, simply create new directories/files under docs/ in Markdown format. To preview the rendered docs website live while you work, run script/docs-server from your terminal (requires Python 3.5+). Changes to docs will be published to the online docs website automatically after they are merged into the main branch. Documentation features \u00b6 Material for MkDocs: Reference See mkdocs.yml for enabled plugins/features Mermaid Use code fences with mermaid type to render Mermaid diagrams within docs. For example, this markdown: ```mermaid graph LR Start --> Stop ``` Yields this diagram: graph LR Start --> Stop","title":"Welcome"},{"location":"#welcome","text":"This website provides technical documentation for the Juniper codebase. Documentation for the main branch is available online at: https://docs.calitp.org/data-infra","title":"Welcome"},{"location":"#editing-documentation","text":"The docs content all lives under docs/ , with some top-level configuration for how the docs website gets built under mkdocs.yml . To add new sections/articles, simply create new directories/files under docs/ in Markdown format. To preview the rendered docs website live while you work, run script/docs-server from your terminal (requires Python 3.5+). Changes to docs will be published to the online docs website automatically after they are merged into the main branch.","title":"Editing documentation"},{"location":"#documentation-features","text":"Material for MkDocs: Reference See mkdocs.yml for enabled plugins/features Mermaid Use code fences with mermaid type to render Mermaid diagrams within docs. For example, this markdown: ```mermaid graph LR Start --> Stop ``` Yields this diagram: graph LR Start --> Stop","title":"Documentation features"},{"location":"warehouse/01_agencies/","text":"Agency GTFS Feeds \u00b6 Feed information is stored in airflow/data/agencies.yml . This file is then used by our Airflow data pipeline to download feeds, and load them into the warehouse. Each agency feed entry includes these fields: agency_name : Human friendly name for the agency itp_id : The California Integrated Travel Project ID URLs such as gtfs_schedule_url , and those for realtime feeds. Finding the ITP ID \u00b6 Entries must include the correct ITP ID for an agency. These can be found on the Primary List of California Transit Providers . Including API Keys \u00b6 If the URL for a GTFS feed requires an API key, you can include using these steps: Add a unique name, and the key to this private spreadsheet . Include the API key in your url by using {{ MY_KEY_NAME }} , where MY_KEY_NAME is the unique name used in the spreadsheet. Below is an example entry. ac-transit : agency_name : AC Transit feeds : - gtfs_schedule_url : https://api.actransit.org/transit/gtfs/download?token={{ AC_TRANSIT_API_KEY }} gtfs_rt_vehicle_positions_url : https://api.actransit.org/gtfsrt/vehicles?token={{ AC_TRANSIT_API_KEY }} gtfs_rt_service_alerts_url : https://api.actransit.org/gtfsrt/alerts?token={{ AC_TRANSIT_API_KEY }} gtfs_rt_trip_updates_url : https://api.actransit.org/gtfsrt/tripupdates?token={{ AC_TRANSIT_API_KEY }} itp_id : 4 Deploying to Pipeline \u00b6 Every time the main branch of cal-itp/data-infra is updated on github, this github action swaps in the API keys and pushes to our Cloud Composer\u2019s data bucket.","title":"Agency GTFS Feeds"},{"location":"warehouse/01_agencies/#agency-gtfs-feeds","text":"Feed information is stored in airflow/data/agencies.yml . This file is then used by our Airflow data pipeline to download feeds, and load them into the warehouse. Each agency feed entry includes these fields: agency_name : Human friendly name for the agency itp_id : The California Integrated Travel Project ID URLs such as gtfs_schedule_url , and those for realtime feeds.","title":"Agency GTFS Feeds"},{"location":"warehouse/01_agencies/#finding-the-itp-id","text":"Entries must include the correct ITP ID for an agency. These can be found on the Primary List of California Transit Providers .","title":"Finding the ITP ID"},{"location":"warehouse/01_agencies/#including-api-keys","text":"If the URL for a GTFS feed requires an API key, you can include using these steps: Add a unique name, and the key to this private spreadsheet . Include the API key in your url by using {{ MY_KEY_NAME }} , where MY_KEY_NAME is the unique name used in the spreadsheet. Below is an example entry. ac-transit : agency_name : AC Transit feeds : - gtfs_schedule_url : https://api.actransit.org/transit/gtfs/download?token={{ AC_TRANSIT_API_KEY }} gtfs_rt_vehicle_positions_url : https://api.actransit.org/gtfsrt/vehicles?token={{ AC_TRANSIT_API_KEY }} gtfs_rt_service_alerts_url : https://api.actransit.org/gtfsrt/alerts?token={{ AC_TRANSIT_API_KEY }} gtfs_rt_trip_updates_url : https://api.actransit.org/gtfsrt/tripupdates?token={{ AC_TRANSIT_API_KEY }} itp_id : 4","title":"Including API Keys"},{"location":"warehouse/01_agencies/#deploying-to-pipeline","text":"Every time the main branch of cal-itp/data-infra is updated on github, this github action swaps in the API keys and pushes to our Cloud Composer\u2019s data bucket.","title":"Deploying to Pipeline"}]}